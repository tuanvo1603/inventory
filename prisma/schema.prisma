// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER") // ADMIN, MANAGER, STAFF, USER
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  salesOrders    SalesOrder[]
  purchaseOrders PurchaseOrder[]

  @@map("users")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]

  @@map("permissions")
}

model Warehouse {
  id          String @id @default(cuid())
  name        String
  address     String?
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products           Product[]
  transfersFrom      WarehouseTransfer[] @relation("FromWarehouse")
  transfersTo        WarehouseTransfer[] @relation("ToWarehouse")
  salesOrderItems    SalesOrderItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@map("warehouses")
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("product_categories")
}

model Product {
  id                String                @id @default(cuid())
  name              String
  model             String
  description       String?
  categoryId        String
  warehouseId       String
  imei              String?               @unique
  serialNumber      String?               @unique
  condition         String                // NEW, LIKE_NEW, GOOD, FAIR, POOR
  purchasePrice     Float?
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  category            ProductCategory       @relation(fields: [categoryId], references: [id])
  warehouse           Warehouse             @relation(fields: [warehouseId], references: [id])
  prices              ProductPrice[]
  salesOrderItems     SalesOrderItem[]
  purchaseOrderItems  PurchaseOrderItem[]
  transferItems       WarehouseTransferItem[]

  @@map("products")
}

model ProductPrice {
  id          String   @id @default(cuid())
  productId   String
  price       Float
  priceType   String   // SELLING, BUYING, WHOLESALE
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("product_prices")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String?
  contactPerson  String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Customer {
  id          String       @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  salesOrders SalesOrder[]

  @@map("customers")
}

model PurchaseOrder {
  id          String              @id @default(cuid())
  orderNumber String              @unique
  supplierId  String
  userId      String
  totalAmount Float
  status      String              @default("PENDING") // PENDING, CONFIRMED, PROCESSING, COMPLETED, CANCELLED
  orderDate   DateTime            @default(now())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  supplier Supplier              @relation(fields: [supplierId], references: [id])
  user     User                  @relation(fields: [userId], references: [id])
  items    PurchaseOrderItem[]
  payments Payment[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  productId       String
  warehouseId     String
  quantity        Int
  unitPrice       Float
  totalPrice      Float

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])

  @@map("purchase_order_items")
}

model SalesOrder {
  id          String           @id @default(cuid())
  orderNumber String           @unique
  customerId  String
  userId      String
  totalAmount Float
  status      String           @default("PENDING") // PENDING, CONFIRMED, PROCESSING, COMPLETED, CANCELLED
  orderDate   DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  customer Customer          @relation(fields: [customerId], references: [id])
  user     User              @relation(fields: [userId], references: [id])
  items    SalesOrderItem[]
  payments Payment[]

  @@map("sales_orders")
}

model SalesOrderItem {
  id           String  @id @default(cuid())
  salesOrderId String
  productId    String
  warehouseId  String
  quantity     Int
  unitPrice    Float
  totalPrice   Float

  // Relations
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])
  warehouse  Warehouse  @relation(fields: [warehouseId], references: [id])

  @@map("sales_order_items")
}

model Payment {
  id              String         @id @default(cuid())
  amount          Float
  paymentMethod   String         // CASH, BANK_TRANSFER, CREDIT_CARD, E_WALLET
  status          String         @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentDate     DateTime?
  salesOrderId    String?
  purchaseOrderId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  salesOrder    SalesOrder?    @relation(fields: [salesOrderId], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  @@map("payments")
}

model WarehouseTransfer {
  id              String                  @id @default(cuid())
  transferNumber  String                  @unique
  fromWarehouseId String
  toWarehouseId   String
  status          String                  @default("PENDING") // PENDING, IN_TRANSIT, COMPLETED, CANCELLED
  transferDate    DateTime                @default(now())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  // Relations
  fromWarehouse Warehouse               @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse               @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  items         WarehouseTransferItem[]

  @@map("warehouse_transfers")
}

model WarehouseTransferItem {
  id                  String            @id @default(cuid())
  warehouseTransferId String
  productId           String
  quantity            Int

  // Relations
  warehouseTransfer WarehouseTransfer @relation(fields: [warehouseTransferId], references: [id])
  product           Product           @relation(fields: [productId], references: [id])

  @@map("warehouse_transfer_items")
}

// Constants for string enums (use in code validation)
// UserRole: ADMIN, MANAGER, STAFF, USER
// ProductCondition: NEW, LIKE_NEW, GOOD, FAIR, POOR  
// PriceType: SELLING, BUYING, WHOLESALE
// OrderStatus: PENDING, CONFIRMED, PROCESSING, COMPLETED, CANCELLED
// PaymentMethod: CASH, BANK_TRANSFER, CREDIT_CARD, E_WALLET
// PaymentStatus: PENDING, PAID, FAILED, REFUNDED
// TransferStatus: PENDING, IN_TRANSIT, COMPLETED, CANCELLED
